#
# Copyright (c) 2019 Wee Loong Kuan
#
# This file is licensed under the MIT license. For more details, see the LICENSE.md file in the
# top-level directory of this distribution.
#

bml_add_test("type_traits.integral_constant" integral_constant.cpp)
bml_add_test("type_traits.bool_constant" bool_constant.cpp)
bml_add_test("type_traits.true_type" true_type.cpp)
bml_add_test("type_traits.false_type" false_type.cpp)
bml_add_test("type_traits.is_same" is_same.cpp)
bml_add_test("type_traits.void_ty" void_ty.cpp)
bml_add_test("type_traits.add_const" add_const.cpp)
bml_add_test("type_traits.add_volatile" add_volatile.cpp)
bml_add_test("type_traits.add_cv" add_cv.cpp)
bml_add_test("type_traits.remove_const" remove_const.cpp)
bml_add_test("type_traits.remove_volatile" remove_volatile.cpp)
bml_add_test("type_traits.remove_cv" remove_cv.cpp)
bml_add_test("type_traits.conditional" conditional.cpp)
bml_add_test("type_traits.is_constructible" is_constructible.cpp)
bml_add_test("type_traits.is_default_constructible" is_default_constructible.cpp)
bml_add_test("type_traits.detected_or" detected_or.cpp)
bml_add_test("type_traits.is_aggregate" is_aggregate.cpp)
bml_add_test("type_traits.is_detected" is_detected.cpp)
bml_add_test("type_traits.detected_ty" detected_ty.cpp)
bml_add_test("type_traits.is_referenceable" is_referenceable.cpp)
bml_add_test("type_traits.add_lvalue_reference" add_lvalue_reference.cpp)
bml_add_test("type_traits.add_rvalue_reference" add_rvalue_reference.cpp)
bml_add_test("type_traits.remove_reference" remove_reference.cpp)
bml_add_test("type_traits.remove_cvref" remove_cvref.cpp)
bml_add_test("type_traits.is_void" is_void.cpp)
bml_add_test("type_traits.add_pointer" add_pointer.cpp)
bml_add_test("type_traits.remove_pointer" remove_pointer.cpp)
bml_add_test("type_traits.is_assignable" is_assignable.cpp)
bml_add_test("type_traits.is_copy_constructible" is_copy_constructible.cpp)
bml_add_test("type_traits.is_move_constructible" is_move_constructible.cpp)
bml_add_test("type_traits.is_copy_assignable" is_copy_assignable.cpp)
bml_add_test("type_traits.is_move_assignable" is_move_assignable.cpp)
bml_add_test("type_traits.nonesuch" nonesuch.cpp)
bml_add_test("type_traits.is_integral" is_integral.cpp)
bml_add_test("type_traits.is_floating_point" is_floating_point.cpp)
bml_add_test("type_traits.is_array" is_array.cpp)
bml_add_test("type_traits.is_class" is_class.cpp)
bml_add_test("type_traits.is_enum" is_enum.cpp)
bml_add_test("type_traits.is_pod" is_pod.cpp)
bml_add_test("type_traits.is_trivial" is_trivial.cpp)
bml_add_test("type_traits.is_union" is_union.cpp)
bml_add_test("type_traits.is_standard_layout" is_standard_layout.cpp)
bml_add_test("type_traits.is_null_pointer" is_null_pointer.cpp)
bml_add_test("type_traits.is_lvalue_reference" is_lvalue_reference.cpp)
bml_add_test("type_traits.is_rvalue_reference" is_rvalue_reference.cpp)
bml_add_test("type_traits.is_reference" is_reference.cpp)
bml_add_test("type_traits.is_base_of" is_base_of.cpp)
bml_add_test("type_traits.remove_extent" remove_extent.cpp)
bml_add_test("type_traits.remove_all_extents" remove_all_extents.cpp)
bml_add_test("type_traits.is_arithmetic" is_arithmetic.cpp)
bml_add_test("type_traits.is_signed" is_signed.cpp)
bml_add_test("type_traits.is_unsigned" is_unsigned.cpp)
bml_add_test("type_traits.is_function" is_function.cpp)
bml_add_test("type_traits.is_member_pointer" is_member_pointer.cpp)
bml_add_test("type_traits.is_member_function_pointer" is_member_function_pointer.cpp)
bml_add_test("type_traits.is_member_object_pointer" is_member_object_pointer.cpp)
bml_add_test("type_traits.is_empty" is_empty.cpp)
bml_add_test("type_traits.is_pointer" is_pointer.cpp)
bml_add_test("type_traits.is_scalar" is_scalar.cpp)
bml_add_test("type_traits.is_object" is_object.cpp)
bml_add_test("type_traits.is_fundamental" is_fundamental.cpp)
bml_add_test("type_traits.is_compound" is_compound.cpp)
bml_add_test("type_traits.is_const" is_const.cpp)
